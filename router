#!/usr/bin/env python3

import argparse
import socket
import time
import json
import select
import struct
import math

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks',
                    type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG:
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(
                socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        split_ip = daddr.split(".")
        for route in self.routes:
            route_split = route["network"].split(".")
            if split_ip[0] == route_split[0]:
                outroutes.append(route)
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        outroutes = []
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        outroutes = []
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None

        routes = lookup_routes(daddr)

        if len(routes) == 1:
            peer = routes[1]["peer"]
        # Rules go here
        elif routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
        get_route(srcif, route["peer"]).sendall(
            json.dumps(packet).encode())
        # else:
        #     no_route_packet = {"src": srcif, "dst": packet["src"],
        #                        "type": "no route", "msg": {}}
        #     self.sockets[srcif].sendall(
        #         json.dumps(no_route_packet).encode())

        # {'type': 'data', 'src': '172.168.0.25', 'dst': '192.168.0.25'}
        # dst_in_routes = False
        # for route in self.routes:
        #  if packet["dst"] in route.values():

        # dst_in_routes = True
        # if not dst_in_routes:
        #     self.send_no_route_message(srcif, packet)
        # else:

    def send_no_route_message(self, srcif, packet):
        # TODO
        return False

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        # save a copy of the announcement in case you need it later
        self.updates.append(packet)
        # add an entry to your forwarding table
        message = packet["msg"]
        network = message["network"]
        netmask = message["netmask"]
        self.routes.append(
            {"network": network, "netmask": netmask, "peer": srcif})
        # send copies of the announcement to neighboring routers
        for sock in self.sockets:
            if not sock == srcif:
                packet["src"] = sock[:-1] + "1"
                packet["dst"] = sock
                if args.asn not in packet["msg"]["ASPath"]:
                    packet["msg"]["ASPath"].append(args.asn)
                self.sockets[sock].sendall(json.dumps(packet).encode())
    #{'type': 'dump', 'src': '192.168.0.2', 'dst': '192.168.0.1', 'msg': {}}
    # 192.168.0.2

    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        return True

    def dump(self, packet):
        """	handles dump table requests	"""
        message = {"src": packet["dst"], "dst": packet["src"],
                   "type": "table", "msg": self.routes}
        self.sockets[message["dst"]].sendall(json.dumps(message).encode())

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        #! TODO
        # DATA = "data"
        # DUMP = "dump"
        # UPDT = "update"
        # RVKE = "revoke"
        # NRTE = "no route"
        message_type = packet["type"]
        if message_type == UPDT:
            self.update(srcif, packet)
        if message_type == DATA:
            self.forward(srcif, packet)
        if message_type == DUMP:
            self.dump(packet)
        return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    # test
    def ip_address_to_binary(self, ip):
        split_ip = ip.split(".")
        eight_bit_nums = []
        for i in split_ip:
            i_in_binary = format(int(i), '08b')
            eight_bit_nums.append(i_in_binary.split("b")[0])
        binary_ip_str = ""
        for i in eight_bit_nums:
            binary_ip_str += i
        return binary_ip_str

    # def binary_to_ip(self, binary):

    # b1 and b2 are binary strings

    def bitwise_addition(self, b1, b2):
        for i in range(len(b1)):
            result = ""
            result += str(int(b1[i]) and int(b2[i]))
        return result

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return


if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
